def convert_to_storage_unit(self, i_value_in_this_unit):
        """
        .. note::
            CAA V5 Visual Basic Help (2020-06-11 12:40:47.360445))
                | o Func ConvertToStorageUnit(double iValueInThisUnit) As
                | double
                | 
                |     Convert the initial value in its equivalent in storage
                |     unit.
                | 
                |     Parameters:
                | 
                |         iValueInThisUnit
                |             The initial value in the current unit. 
                |         oValueInStorageUnit
                |             The final value in the corresponding storage unit.

        :param float i_value_in_this_unit:
        :return: float
        """
        return self.unit.ConvertToStorageUnit(i_value_in_this_unit) 
        
        def convert_unit(source_unit, target_unit, source_value,
                     source_period=None, target_period=None):
        """Convert value per unit from source to target unit. If a unit is
        absolute, total timedelta period has to be provided. If a unit is a
        month or a year, it is recommended to pass timedelta period object
        directly, if not provided, the approximation will be used.
        """
        if (target_unit == 'absolute' and not target_period) or \
           (source_unit == 'absolute' and not source_period):
                raise ValueError('Absolute period needs to be provided.')
                return
        if not source_period:
            source_period = QuantitativeState._get_period_from_unit(
                source_unit)
        if not target_period:
            target_period = QuantitativeState._get_period_from_unit(
                target_unit)
        if source_unit == 'second':
            return QuantitativeState.from_seconds(source_value, target_period)
        if target_unit == 'second':
            return QuantitativeState.value_per_second(
                source_value, source_period)
        return round(source_value * (target_period / source_period)) 
     
def calcPounds (kilogram1, kilogram2, kilogram3, kilogram4, kilogram5,\
               kilogram6, kilogram7, kilogram8, kilogram9, kilogram10):
   
pound1 = kilogram1 * 0.453592
pound2 = kilogram2 * 0.453592
pound3 = kilogram3 * 0.453592
pound4 = kilogram4 * 0.453592
pound5 = kilogram5 * 0.453592
pound6 = kilogram6 * 0.453592
pound7 = kilogram7 * 0.453592
pound8 = kilogram8 * 0.453592
pound9 = kilogram9 * 0.453592
pound10 = kilogram10 * 0.453592

return pound1, pound2, pound3, pound4, pound5,\
     pound6, pound7, pound8, pound9, pound10                
               



There is a program in Python called Pint that you add using the code:
$ pip install -U pint
and it is also on GitHub
github.com/hgrecco/pint.git


Code example written out from Youtube video:
